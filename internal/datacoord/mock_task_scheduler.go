// Code generated by mockery v2.32.4. DO NOT EDIT.

package datacoord

import mock "github.com/stretchr/testify/mock"

// MockTaskScheduler is an autogenerated mock type for the TaskScheduler type
type MockTaskScheduler struct {
	mock.Mock
}

type MockTaskScheduler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTaskScheduler) EXPECT() *MockTaskScheduler_Expecter {
	return &MockTaskScheduler_Expecter{mock: &_m.Mock}
}

// Start provides a mock function with given fields:
func (_m *MockTaskScheduler) Start() {
	_m.Called()
}

// MockTaskScheduler_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockTaskScheduler_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockTaskScheduler_Expecter) Start() *MockTaskScheduler_Start_Call {
	return &MockTaskScheduler_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockTaskScheduler_Start_Call) Run(run func()) *MockTaskScheduler_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTaskScheduler_Start_Call) Return() *MockTaskScheduler_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTaskScheduler_Start_Call) RunAndReturn(run func()) *MockTaskScheduler_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *MockTaskScheduler) Stop() {
	_m.Called()
}

// MockTaskScheduler_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockTaskScheduler_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockTaskScheduler_Expecter) Stop() *MockTaskScheduler_Stop_Call {
	return &MockTaskScheduler_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockTaskScheduler_Stop_Call) Run(run func()) *MockTaskScheduler_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTaskScheduler_Stop_Call) Return() *MockTaskScheduler_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTaskScheduler_Stop_Call) RunAndReturn(run func()) *MockTaskScheduler_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// Submit provides a mock function with given fields: task
func (_m *MockTaskScheduler) Submit(task Task) {
	_m.Called(task)
}

// MockTaskScheduler_Submit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Submit'
type MockTaskScheduler_Submit_Call struct {
	*mock.Call
}

// Submit is a helper method to define mock.On call
//   - task Task
func (_e *MockTaskScheduler_Expecter) Submit(task interface{}) *MockTaskScheduler_Submit_Call {
	return &MockTaskScheduler_Submit_Call{Call: _e.mock.On("Submit", task)}
}

func (_c *MockTaskScheduler_Submit_Call) Run(run func(task Task)) *MockTaskScheduler_Submit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Task))
	})
	return _c
}

func (_c *MockTaskScheduler_Submit_Call) Return() *MockTaskScheduler_Submit_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTaskScheduler_Submit_Call) RunAndReturn(run func(Task)) *MockTaskScheduler_Submit_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTaskScheduler creates a new instance of MockTaskScheduler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTaskScheduler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTaskScheduler {
	mock := &MockTaskScheduler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
